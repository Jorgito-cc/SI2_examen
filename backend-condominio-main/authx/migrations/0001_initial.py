# Generated by Django 5.2.6 on 2025-09-16 11:23

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Rol',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=50, unique=True)),
            ],
            options={
                'verbose_name': 'rol',
                'verbose_name_plural': 'roles',
                'ordering': ['nombre'],
            },
        ),
        migrations.CreateModel(
            name='Usuario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('ci', models.CharField(blank=True, max_length=20, null=True, unique=True)),
                ('nombre', models.CharField(blank=True, max_length=100)),
                ('telefono', models.CharField(blank=True, max_length=20)),
                ('estado', models.CharField(choices=[('ACTIVO', 'Activo'), ('INACTIVO', 'Inactivo'), ('BLOQUEADO', 'Bloqueado')], default='ACTIVO', max_length=20)),
                ('url_img', models.URLField(blank=True)),
                ('registro_facial', models.JSONField(blank=True, null=True)),
                ('carnet', models.CharField(blank=True, max_length=50)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'usuario',
                'verbose_name_plural': 'usuarios',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Personal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ocupacion', models.CharField(max_length=100)),
                ('horario_entrada', models.TimeField()),
                ('horario_salida', models.TimeField()),
                ('usuario', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='personal', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'personal',
                'verbose_name_plural': 'personal',
            },
        ),
        migrations.CreateModel(
            name='Residente',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('usuario', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='residente', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'residente',
                'verbose_name_plural': 'residentes',
            },
        ),
        migrations.CreateModel(
            name='RolUsuario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rol', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rol_usuarios', to='authx.rol')),
                ('usuario', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='usuario_roles', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'rol de usuario',
                'verbose_name_plural': 'roles de usuario',
            },
        ),
        migrations.AddField(
            model_name='usuario',
            name='roles',
            field=models.ManyToManyField(related_name='usuarios', through='authx.RolUsuario', to='authx.rol'),
        ),
        migrations.CreateModel(
            name='PasswordResetCode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=6)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('expires_at', models.DateTimeField()),
                ('used', models.BooleanField(default=False)),
                ('usuario', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pwd_resets', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'código de reset',
                'verbose_name_plural': 'códigos de reset',
                'indexes': [models.Index(fields=['usuario', 'used'], name='authx_passw_usuario_15ff91_idx'), models.Index(fields=['created_at'], name='authx_passw_created_c2cc25_idx')],
                'constraints': [models.UniqueConstraint(condition=models.Q(('used', False)), fields=('usuario',), name='uniq_active_reset_per_user')],
            },
        ),
        migrations.AddConstraint(
            model_name='rolusuario',
            constraint=models.UniqueConstraint(fields=('usuario', 'rol'), name='uniq_usuario_rol'),
        ),
        migrations.AddIndex(
            model_name='usuario',
            index=models.Index(fields=['estado'], name='authx_usuar_estado_2949a3_idx'),
        ),
        migrations.AddIndex(
            model_name='usuario',
            index=models.Index(fields=['username'], name='authx_usuar_usernam_ff1fa7_idx'),
        ),
        migrations.AddIndex(
            model_name='usuario',
            index=models.Index(fields=['email'], name='authx_usuar_email_54d0b8_idx'),
        ),
    ]
